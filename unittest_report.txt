Doctest gives an example of the usage of function, which plays a role like the documentation. What the doctest needs is copying and pasting the executing results when the program runs in the python environment. It demonstrates an intuitive operation of the module. However, its methods for test is limited. The doctest is better used for check the documentation rather than test. The goal of test is that you have to test every case thoroughly. But the doctest have many manual operations, which brings a lot of inconvenience and decreases the efficiency of test.

Comparatively, unittest is more exhaustive than doctest. There are several steps to conduct the unittest. Import the unittest; define a class of testcase which inherits the unittest.TestCase; define the testcases which are going to be tested; then call the assertEqual, assertTrue or other assert methods to judge whether the results are corresponding with the expectancy; call the unittest.main() to start the test. If the test failed, it will report corresponding errors. When we do the unittest, we are clearly aware of what results are expected, because most of time, testers need to input the expected values in the testcase. Once a module is updated, we can run the unittest to validate the functionality of the module. If the test is success, it means the modification will not affect the functionality of the module, otherwise, once the modification is not consistent with the original function, it means we have to modify the module according to the requirements. The benefits of unittest is that it guarantees the behaviors of the module of the program so that when we update the codes, we can ensure the results of the module. 

For every program, the testcase should be specific, that is, every function may have many different testcases, it is more readable and structured to create the specific testcase includes the probable behaviors of the same function. Therefore, applying the unittest is more practical since it provides a great deal of assert methods to judge the expected results of a module. Besides, setUp and tearDown methods make the process of test standardized. The former method makes the assignment and executes some operations of database before the test while the latter cleanup after the test, proceed parameter reduction and restore of database recovery.

However, most of time, unittest test the classes of program, when dealing with the small scripts that contain no class, then it seems to be inconvenient. In this case, it is better to apply the doctest, since it is simpler to use and easier to comprehend.