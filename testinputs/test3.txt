OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

Currently, your tests are all system tests and go through subprocess. This means they are very dependent on your getting everything right, including the rather challenging formatting of the output string. If you go onto the Blackboard discussion forum, you’ll see that it’s challenging to get doctest to treat line endings correctly! So even if you do get the formatting right, the framework might have difficulty.

In the end, the strength of system testing is also its weakness: It tests the whole system as an integrated whole. But even with this tiny tool, we might want to test parts of the system as we develop it, rathe than having to get the whole thing working before knowing whether we were counting lines correctly.

What we want is to do unit testing, that is, specific test for the smallest coherent bits of the system. This necessarily is a form of white box testing, as equivalent systems can have very different internal structure, thus very different units.

For this task, you should create a new version of your combined test suite that covers roughly the same ground as that test suite but does so at the “unit” level.

What does this mean? Well suppose you have a function wc-for-one-file that takes an open file as a parameter and returns a list with the line, word, and character counts. You should have doctests which target that function.


# we need to open the file!
"""
>>> with open('testfiles/test1.txt') as f: wc(f)
[10, 10, 20, 'test1.txt']
"""
if __name__ == "__main__":
    import doctest
    doctest.testmod()

The tradeoffs are clear: On the one hand, we can test our counter without having to either solve the formatting problem or writing “wrong” tests (i.e., ones with the wrong formatting.) On the other, we have to write more tests, often testing the “same” thing.

You may want to break up your tests a little, at least at the “doctoring” level, but perhaps even into different files. For example, you may want one file for “counting” and another for “displaying”. Again, smaller suites are faster to run and easier to work with (in general).
The format was derived from the Software Carpentry template. The lessons are sort of patterned and inspired by the Software Carpentry style.
pen Quick Links
Quick Links
Page Landmarks

Content Outline

Keyboard Shortcuts

Global Menu
Blackboard Learn
Top Frame Tabs
Blackboard Tab 1 of 2 (active tab)
	
My Manchester Tab 2 of 2
Current Location

    COMP61511 Software Engineering Concepts in Practice 2016-17 1st Semester
    Course Content 

Hide Course Menu
Menu Management Options

    Refresh
    Display Course Menu in a Window

Course Menu:
COMP61511 Software Engineering Concepts in Practice 2016-17 1st Semester
Course Entry Page

    Course Content
    My Grades
    Learning Resources
    eLearning Support
    Staff Details

Banner
Course Content
Content

    Discussion Forum

    This should be your FIRST STOP for questions and comments!


    It's convenient and allows you to help each other. If you are worried about whether you might be colluding or engaged in some form of academic mal practice or you have a personal concern, don't hesitate to email me first. I'm happy to screen your messages, though I'll often redirect them to the forum.


    It's great to chat in person as well, and works best for many things. But when you post your question or comment here, you have the chance of helping everyone.
    Week 2: Deep into Testing

    This week's coursework!
    Week 1: Getting Started

    This week's coursework! Q1 and CW1!
    Materials Page

    This page has links to the slides and the readings for each week!

Blackboard Learn
© 1997-2016 Blackboard Inc. All Rights Reserved. US Patent No. 7,493,396 and 7,558,853. Additional Patents Pending.

Accessibility information

Installation details

MP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
MP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top
OMP61511 (2016): Labs
Reverse engineering wc (Word Count)
Correctness verification (encore)
Learning Objectives

    Students will be able to use a test suite to compare programs.
    Students will be able to use doctest for unit testing.

In the lecture (and reading) we discussed that tests can target levels of a software system. For CW1, you developed a collation of system tests. System tests have certain advantages:

    They test the whole system! Ultimately, we want to know about the system as a whole.
    Since, in our case, they test to a common interface they should be portable between implementations.

Remember, your tests and test infrastructure is part of a complex software system, so needs care and effort to develop.

For this task, you will get together with a partner to collaborate.
wc.py cross-check

Until now, you’ve only done developer testing which has a number of problems (cf McConnell). Now we will look at other people’s programs to try to verify or improve them.

Right now, you each have a test suite using the doctest harness. Thus, the first step is to try to run your test suite against your partner’s wc.py.

    You need to share your CW1 with your partner. They will primarily need your actual working wc.py, but sharing the whole CW1 is good. You can do this by email, memory stick, or gitlab repositories. The last is the best, but is not required at this point (there is online documentation). You will have to use git and Gitlab in the near future so it’s not bad to try it now, but don’t burn a lot of time on it.
    Create a safe copy of your own CW1 directory. Put your partner’s name on that directory to help keep track of which is which. Replace your wc.py with your partner’s and try to run your wc-doctest.py.
    Look at the errors, if any! The first thing you should verify is that your tests work correctly with your partner’s wc.py.
    If both wc.py pass both test suites, then you are done this section! Yay!

If your test suite flushes out some problems with your partner’s wc.py you need to do both try to understand the implementation problem and understand what it was about their test suite that missed the problem.

Look at each other’s test suite to determine strengths or weaknesses. You want, ultimately, to produce one, combined test suite.
Is more, better?

It’s tempting to just merge your test suites and call it a day. However, more tests don’t necessarily make the test suite better. If the additional tests are redundant, then they just add to the time it takes to run the tests! That’s not meaningful.

It’s entirely possible that you just need to pick one of the test suites e.g., if they are equally good. Feel free to flip a coin!

Consider whether your test suite is comprehensive. Look at McConnell’s testing tips and see if any apply. Are there corner cases you’ve missed?
wc.py code review

Code review is an important quality assurance technique. Reading code, in any case, is an essential skill as you will have to read, modify, or fit in with other people’s code all the time.

For the next task, you will review your partner’s wc.py. If it doesn’t pass one of the test suites, then try to figure out where the problems lie. Otherwise, just review the code for understanding and correctness.

If you find what seems to be a problem that isn’t revealed by any existing test, then write a test to demonstrate it!

You should feel free to discuss the code with your partner. Ask questions or offer comments.
Convert your wc-doctest.py to unit tests

                                                                                                                                                                                                 1,1           Top



